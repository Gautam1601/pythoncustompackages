name: release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Release type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - beta
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      package_manager:
        description: 'Package manager to use'
        required: true
        default: 'poetry'
        type: choice
        options:
          - poetry
          - setuptools

# Add top-level permissions
permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_information.outputs.package_name }}
      new_version: ${{ inputs.version }}
      suffix: ${{ inputs.version_type }}
      tag_name: ${{ inputs.version }}-${{ inputs.version_type }}
      package_manager: ${{ inputs.package_manager }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create tag
        run: |
          TAG_NAME=${{ inputs.version }}-${{ inputs.version_type }}
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag $TAG_NAME
          git push origin $TAG_NAME
          echo "Created and pushed tag: $TAG_NAME"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        if: ${{ inputs.package_manager == 'poetry' }}
        run: pip install poetry

      - name: Get Package Name (Poetry)
        id: package_information_poetry
        if: ${{ inputs.package_manager == 'poetry' }}
        run: |
          package_information=$(poetry version)
          PACKAGE_NAME=$(echo $package_information | awk '{print $1}')
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Get Package Name (Setuptools)
        id: package_information_setuptools
        if: ${{ inputs.package_manager == 'setuptools' }}
        run: |
          if [ -f "setup.py" ]; then
            PACKAGE_NAME=$(python -c "import ast; print(ast.literal_eval(open('setup.py').read().split('name=')[1].split(',')[0].strip()))")
          elif [ -f "setup.cfg" ]; then
            PACKAGE_NAME=$(python -c "import configparser; config = configparser.ConfigParser(); config.read('setup.cfg'); print(config['metadata']['name'])")
          else
            PACKAGE_NAME="${{ github.repository#*/}}"
          fi
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

      - name: Set package name output (Poetry)
        if: ${{ inputs.package_manager == 'poetry' }}
        run: echo "package_name=${{ steps.package_information_poetry.outputs.package_name }}" >> "$GITHUB_OUTPUT"

      - name: Set package name output (Setuptools)
        if: ${{ inputs.package_manager == 'setuptools' }}
        run: echo "package_name=${{ steps.package_information_setuptools.outputs.package_name }}" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          PACKAGE_NAME=${{ needs.details.outputs.package_name }}
          response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            latest_previous_version="0.0.0"
          fi
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          fi

  setup_and_build:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        if: ${{ needs.details.outputs.package_manager == 'poetry' }}
        run: pip install poetry

      - name: Set version (Poetry)
        if: ${{ needs.details.outputs.package_manager == 'poetry' }}
        run: poetry version ${{ needs.details.outputs.new_version }}

      - name: Set version (Setuptools)
        if: ${{ needs.details.outputs.package_manager == 'setuptools' }}
        run: |
          if [ -f "setup.py" ]; then
            sed -i "s/version=['\"]\(.*\)['\"],/version='${{ needs.details.outputs.new_version }}',/" setup.py
          elif [ -f "setup.cfg" ]; then
            python -c "import configparser; config = configparser.ConfigParser(); config.read('setup.cfg'); config['metadata']['version'] = '${{ needs.details.outputs.new_version }}'; with open('setup.cfg', 'w') as f: config.write(f)"
          else
            cat > setup.py << EOF
from setuptools import setup, find_packages

setup(
    name='${{ needs.details.outputs.package_name }}',
    version='${{ needs.details.outputs.new_version }}',
    packages=find_packages(),
)
EOF
          fi

      - name: Create version bump PR
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-${{ needs.details.outputs.new_version }}
          if [ "${{ needs.details.outputs.package_manager }}" == "poetry" ]; then
            git add pyproject.toml poetry.lock
          else
            git add setup.py setup.cfg || true
          fi
          git commit -m "Bump version to ${{ needs.details.outputs.new_version }}"
          git push origin version-bump-${{ needs.details.outputs.new_version }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: version-bump-${{ needs.details.outputs.new_version }}
          title: "Bump version to ${{ needs.details.outputs.new_version }}"
          body: "This PR bumps the version to ${{ needs.details.outputs.new_version }}."
          labels: "version-bump"

      - name: Install dependencies (Poetry)
        if: ${{ needs.details.outputs.package_manager == 'poetry' }}
        run: poetry install --no-interaction

      - name: Install dependencies (Setuptools)
        if: ${{ needs.details.outputs.package_manager == 'setuptools' }}
        run: |
          pip install -e .
          pip install build wheel

      - name: Build package (Poetry)
        if: ${{ needs.details.outputs.package_manager == 'poetry' }}
        run: poetry build

      - name: Build package (Setuptools)
        if: ${{ needs.details.outputs.package_manager == 'setuptools' }}
        run: python -m build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details, check_pypi]
    runs-on: ubuntu-latest
    environment:
      name: release

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
